# General
# Each server within a cluster needs a unique name. Set to UUID to have deepstream autogenerate a unique id
serverName: UUID
# Show the deepstream logo on startup (highly recommended)
showLogo: true
# Log messages with this level and above. Valid levels are DEBUG, INFO, WARN, ERROR, OFF
logLevel: INFO
# Plugin startup timeout â€“ deepstream init will fail if any plugins fail to emit a 'done' event within this timeout
dependencyInitialisationTimeout: 2000
# Directory where all plugins reside
#libDir: ../lib

# SSL Configuration
sslKey: null
sslCert: null
sslDHParams: null
sslPassphrase: null

rpc:
  # Timeout for client RPC acknownledgement
  ackTimeout: 1000
  # Timeout for actual RPC provider response
  responseTimeout: 10000

record:
  # Maximum time permitted to fetch from cache
  cacheRetrievalTimeout: 30000
  # Maximum time permitted to fetch from storage
  storageRetrievalTimeout: 30000
  # A list of prefixes that, when a record starts with one of the prefixes the
  # records data won't be stored in the db
  # storageExclusionPrefixes:
  #   - no-storage/
  #   - temporary-data/
  # A list of prefixes that, when a record is updated via setData and it matches one of the prefixes
  # it will be permissioned and written directly to the cache and storage layers
  # storageHotPathPrefixes:
  #   - analytics/
  #   - metrics/

listen:
  # Try finding a provider randomly rather than by the order they subscribed to.
  shuffleProviders: true
  # The amount of time to wait for a provider to acknowledge or reject a listen request
  responseTimeout: 500
  # The amount of time before trying to reattempt finding matches for subscriptions. This
  # is not a cheap operation so it's recommended to raise keep this at minutes rather then
  # second intervals if you are experiencing heavy loads
  rematchInterval: 60000
  # The amount of time a server will refuse to retry finding a subscriber after a previously
  # failed attempt. This is used to avoid servers constantly trying to find a match without a
  # cooldown period
  matchCooldown: 10000

# Connection Endpoint Configuration
# to disable, replace configuration with null eg. `http: null`
connectionEndpoints:
  - type: uws-websocket
    options:
        # port for the websocket server
        port: 6020
        # host for the websocket server
        host: 0.0.0.0
        # url path websocket connections connect to
        urlPath: /deepstream
        # url path for http health-checks, GET requests to this path will return 200 if deepstream is alive
        healthCheckPath: /health-check
        # the amount of milliseconds between each ping/heartbeat message
        heartbeatInterval: 30000
        # the amount of milliseconds that writes to sockets are buffered
        outgoingBufferTimeout: 50
        # the maximum amount of bytes to buffer before flushing, stops the client from large enough packages
        # to block its responsivness
        maxBufferByteSize: 100000

        # Headers to copy over from websocket
        headers:
          - user-agent

        # Security
        # amount of time a connection can remain open while not being logged in
        unauthenticatedClientTimeout: 180000
        # invalid login attempts before the connection is cut
        maxAuthAttempts: 3
        # if true, the logs will contain the cleartext username / password of invalid login attempts
        logInvalidAuthData: false
        # maximum allowed size of an individual message in bytes
        maxMessageSize: 1048576

  - type: node-http
    options:
      # port for the http server
      port: 8080
      # host for the http server
      host: 0.0.0.0
      # allow 'authData' parameter in POST requests, if disabled only token and OPEN auth is
      # possible
      allowAuthData: true
      # enable the authentication endpoint for requesting tokens/userData.
      # note: a custom authentication handler is required for token generation
      enableAuthEndpoint: false
      # path for authentication requests
      authPath: /auth
      # path for POST requests
      postPath: /
      # path for GET requests
      getPath: /
      # url path for http health-checks, GET requests to this path will return 200 if deepstream is alive
      healthCheckPath: /health-check

      # Headers to copy over from http request
      headers:
        - user-agent

      # -- CORS --
      # if disabled, only requests with an 'Origin' header matching one specified under 'origins'
      # below will be permitted and the 'Access-Control-Allow-Credentials' response header will be
      # enabled
      allowAllOrigins: true
      # a list of allowed origins
      origins:
        - 'https://example.com'
      # maximum allowed size of an individual message in bytes
      maxMessageSize: 1024

  # - type: uws-websocket
  #   options:
  #       # port for the websocket server
  #       port: 6020
  #       # host for the websocket server
  #       host: 0.0.0.0
  #       # url path websocket connections connect to
  #       urlPath: /deepstream
  #       # url path for http health-checks, GET requests to this path will return 200 if deepstream is alive
  #       healthCheckPath: /health-check
  #       # the amount of milliseconds between each ping/heartbeat message
  #       heartbeatInterval: 30000
  #       # the amount of milliseconds that writes to sockets are buffered
  #       outgoingBufferTimeout: 50
  #       # the maximum amount of bytes to buffer before flushing, stops the client from large enough packages
  #       # to block its responsivness
  #       maxBufferByteSize: 100000
  
  #       # Headers to copy over from websocket
  #       headers:
  #         - user-agent

  #       # Security
  #       # amount of time a connection can remain open while not being logged in
  #       unauthenticatedClientTimeout: 180000
  #       # invalid login attempts before the connection is cut
  #       maxAuthAttempts: 3
  #       # if true, the logs will contain the cleartext username / password of invalid login attempts
  #       logInvalidAuthData: false
  #       # maximum allowed size of an individual message in bytes
  #       maxMessageSize: 1048576

# Logger Configuration
logger:
  # use either the default logger
  type: default
  options:
    colors: true
    # value of logLevel (line 4) will always overwrite this value
    logLevel: INFO

# cache:
#   name: redis
#   options:
#     host: localhost
#     port: 6379

# storage:
#   name: rethinkdb
#   options:
#     host: localhost
#     port: 28015

# Authentication
auth:
  type: none

  #  # reading users and passwords from a file
  #  type: file
  #  options:
  #    # Path to the user file. Can be json, js or yml
  #    path: ./users.yml
  #    # the name of a HMAC digest algorithm
  #    hash: 'md5'
  #    # the number of times the algorithm should be applied
  #    iterations: 100
  #    # the length of the resulting key
  #    keyLength: 32

  #  # getting permissions from a http webhook
  #  type: http
  #  options:
  #    # a post request will be send to this url on every incoming connection
  #    endpointUrl: https://someurl.com/validateLogin
  #    # any of these will be treated as access granted
  #    permittedStatusCodes: [ 200 ]
  #    # if the webhook didn't respond after this amount of milliseconds, the connection will be rejected
  #    requestTimeout: 2000
  #    # promote the following items from the login auth data into headers
  #    promoteToHeader:
  #     - token
  #    # the codes which the auth handler should retry. This is useful for when the API you depend on is 
  #    # flaky or going through a not so blue/green deployment
  #    retryStatusCodes: [ 404, 504 ]
  #    # the maximum amount of retries before returning a false login
  #    retryAttempts: 3
  #    # the time in milliseconds between retries
  #    retryInterval: 5000

# Permissioning
permission:
  type: config
  options:
    # Path to the permissionFile. Can be json, js or yml
    path: ./permissions.yml
    # Amount of times nested cross-references will be loaded. Avoids endless loops
    maxRuleIterations: 3
    # PermissionResults are cached to increase performance. Lower number means more loading
    cacheEvacuationInterval: 60000
